#!/usr/bin/env bash
#
# Stream to youtube! this program is very opinionated.
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: September 04, 2021
# License: MIT

. ./lib/utils || exit 1

resolution='1920x1080'
preset='ultrafast'
bitrate='3500k'
maxrate='5000k'
bufsize='8000k'
fps=24
fontcolor='#004500'
fontsize='38'
textlocation='x=30:y=h-th-10'

rtmpurl="rtmp://a.rtmp.youtube.com/live2"

usage() {
	local prog=${0##*/}
	cat <<-EOF
	Usage: $prog [options] [output]

	Options:
	  -a <fifo>      required: pipe to read audio input from (generated by shuffle-and-loop-music)
	  -b <file.mp4>  required: background video, should match resolution set in this program ($resolution)
	  -f <font.ttf>  required: font file to use for drawing text
	  -k <key.txt>   optional: youtube stream key in a text file, optional if output is set to stdout for testing
	  -t <text.txt>  required: text file to read text to render to the video - updated dynamically

	Arguments
	  - Specifying '-' as the last argument will tell this program to output to stdout instead of
	    streaming to youtube.  This can then be piped to ffplay for testing like:

	      $prog ... - | ffplay -f flv -
	EOF
}

audiopipe=
background=
fontfile=
keyfile=
textfile=
while getopts 'a:b:f:hk:t:' option; do
	case "$option" in
		a) audiopipe=$OPTARG;;
		b) background=$OPTARG;;
		f) fontfile=$OPTARG;;
		h) usage; exit 0;;
		k) keyfile=$OPTARG;;
		t) textfile=$OPTARG;;
		*) usage; exit 1;;
	esac
done
shift "$((OPTIND - 1))"
output=$1

[[ -n $audiopipe ]] || fatal '-a required'
[[ -n $background ]] || fatal '-b required'
[[ -n $fontfile ]] || fatal '-f required'
[[ -n $textfile ]] || fatal '-t required'

# ensure the fifo exists and is held open by this program
mkfifo "$audiopipe" &>/dev/null
[[ -p $audiopipe ]] || fatal "$audiopipe is not a pipe"
exec 7<>"$audiopipe"

if [[ $output != '-' && -z $keyfile ]]; then
	fatal '-k required if output is not stdout'
fi

if [[ -n $keyfile ]]; then
	key=$(cat "$keyfile") || fatal "failed to read keyfile $keyfile"
	key_re='[a-z0-9-]+'
	[[ $key =~ $key_re ]] || fatal 'key does not appear valid'
	rtmpurl=$rtmpurl/$key
fi

if [[ $output != '-' ]]; then
	output=$rtmpurl
fi

doublefps=$((fps * 2))

ffmpeg \
	-nostdin \
	-re -stream_loop -1 \
	-f s16le -acodec pcm_s16le -ar 44100 -ac 2 -i "$audiopipe" \
	-stream_loop -1 -i "$background" \
	-map 0:a -map 1:v \
	-vf "drawtext=fontfile=$fontfile:textfile=$textfile:reload=1:fontcolor=$fontcolor:fontsize=$fontsize:$textlocation" \
	-vcodec libx264 \
	-b:v "$bitrate" \
	-acodec aac \
	-ac 2 -b:a 192k -ar 44100 \
	-x264-params "keyint=$doublefps:min-keyint=$doublefps:scenecut=-1" \
	-r "$fps" -g "$doublefps" \
	-maxrate "$maxrate" -bufsize "$bufsize" \
	-preset "$preset" \
	-s "$resolution" \
	-f flv \
	"$output"
