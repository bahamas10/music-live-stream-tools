#!/usr/bin/env bash
#
# Shuffle a directory of mp3 files and continuosly stream their decoded data to
# a given fifo.
#
# Usage: shuffle-and-loop-music <mp3-dir> <pipe> [now-playing]
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: September 04, 2021
# License: MIT

. ./lib/utils || exit 1

dir=$1
pipe=$2
nowplaying=$3

shift 3

# audio config
samplerate=44100
channels=2

mp3-to-raw() {
	local mp3=$1

	[[ -n $mp3 ]] || fatal 'mp3-to-raw called without argument'

	ffmpeg \
		-hide_banner -nostdin -loglevel error \
		-i "$mp3" \
		-f s16le -acodec pcm_s16le \
		-ac "$channels" -ar "$samplerate" \
		-
}

usage() {
	local prog=${0##*/}
	cat <<-EOF
	Usage: $prog <mp3-dir> <pipe> [now-playing] [cmd [args ...]]
	EOF
	exit 1
}

tmp=$nowplaying.tmp

[[ -n $dir ]] || usage
[[ -n $pipe ]] || usage

[[ -d $dir ]] || fatal "$dir not a directory"

# ensure the fifo exists and is held open by this program
mkfifo "$pipe" &>/dev/null
[[ -p $pipe ]] || fatal "$pipe is not a pipe"
exec 7<>"$pipe" || fatal "failed to open $pipe"

lastsong=
currentsong=
while true; do
	log 'beginning loop'

	while IFS= read -r -d '' f; do
		bname=${f##*/}

		# skip over files that have been removed
		if [[ ! -f $f ]]; then
			warn "skipping $bname - not found"
			continue
		fi
		currentsong=$f

		# skip over this song if it was *just* played
		if [[ $lastsong == "$currentsong" ]]; then
			log "skipping $bname - was just played"
			continue
		else
			lastsong=
		fi

		log "playing $bname"

		# atomically write the now-playing file if it was set
		if [[ -n $nowplaying ]]; then
			echo "$bname" > "$tmp" &&
				mv "$tmp" "$nowplaying"
		fi

		# call command if it was set
		if [[ -n $1 ]]; then
			"$@"
			code=$?
			if ((code != 0)); then
				warn "called \`$*\` - exited $code"
			fi
		fi

		# play the song!
		mp3-to-raw "$f" > "$pipe" || log "failed to play $f"
	done < <(find "$dir" -type f -name '*.mp3' -print0 | shuf -z)

	lastsong=$currentsong
done
